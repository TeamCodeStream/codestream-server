#!/bin/bash

[ -z "$1" ] && echo "Do not run this script directly. Run dt-configure-sandbox instead." && exit 1

# argument:
#   configure         normal configuration mode. Run on a clean install or reconfigure (mode = configure)
#   git_hook          run from within a git hook (mode = git_hook)
#   deploy            run from within a deployment (dt-build)
#   configureNoAbort  configuration mode but don't abort early if there's a build failure (mode = configure)
mode=""
abort_on_fail=1
[ "$1" == "git-hook" ] && mode=git_hook
[ "$1" == "configure" ] && mode=configure
[ "$1" == "install" ] && mode=install
[ "$1" == "reconfigure" ] && mode=reconfigure
[ "$1" == "deploy" ] && mode=deploy
[ "$1" == "configureNoAbort" ] && mode=configure && abort_on_fail=0
[ -z "$mode" ] && echo "Error: bad configure mode" && exit 1

# This script is called from dt-configure-sandbox. Do not call it directly.
# It may also be called from a git hook.
#
# Place any commands needed to prepare the sandbox for use here. Assume all
# environment variables have been set.

[ ! -d $CS_API_REPO_ROOT/.git ] && echo "nothing to configure for a pre-built asset sandbox ($CS_API_REPO_ROOT/.git not found)" && exit 0
[ -f $CS_API_REPO_ROOT/.gitmodules ] && echo "updating submodules" && (cd $CS_API_REPO_ROOT && git submodule update --init --recursive)

cd $CS_API_TOP

if [ -n "$CS_API_NODE_MODULES_DIR" ]; then
	[ -d "$CS_API_NODE_MODULES_DIR" ] && /bin/rm -rf $CS_API_NODE_MODULES_DIR
	[ "$CS_API_NODE_MODULES_DIR" != "$CS_API_TOP/node_modules" ] && mkdir -p $CS_API_NODE_MODULES_DIR && ln -s $CS_API_TOP/package.json $CS_API_NODE_MODULES_DIR/package.json && ln -s $CS_API_TOP/package-lock.json $CS_API_NODE_MODULES_DIR/package-lock.json
else
	[ -d $CS_API_TOP/node_modules ] && /bin/rm -rf $CS_API_TOP/node_modules
fi

echo "npm install --no-save $CS_API_NPM_INSTALL_XTRA_OPTS (from `pwd`)"
npm install --no-save $CS_API_NPM_INSTALL_XTRA_OPTS

# Add absolute remotes
echo git remote add private git@github.com:teamcodestream/codestream-server-private
git remote add private git@github.com:teamcodestream/codestream-server-private

# package integrity check
# if [ -f sandbox/package-versions.txt ]; then
# 	tmpfile=/tmp/junk$$
# 	npm ls |grep -v ^CodeStream_Server@ >$tmpfile
# 	x=`diff sandbox/package-versions.txt $tmpfile|wc -l`
# 	if [ $x -gt 0 ]; then
# 		echo "***************************************************************************"
# 		echo "   WARNING: package tree looks different than sandbox/package-versions.txt."
# 		echo "            Update the file with the following command if it's out of date:"
# 		echo
# 		echo "       npm ls | grep -v ^CodeStream_ >sandbox/package-versions.txt"
# 		echo "***************************************************************************"
# 	else
# 		echo "Package integrtity check looks good"
# 	fi
# 	/bin/rm $tmpfile
# fi

# This needs to work for both individual and mono-repo
echo -n "Installing git hooks as sym links"
cd $CS_API_REPO_ROOT/.git/hooks
[ -d ../../api_server/hooks ] && hooksDir=../../api_server/hooks || hooksDir=../../hooks
for hook in post-checkout post-merge post-rewrite
do
	echo -n "__ $hooksDir/$hook __"
	ln -snf $hooksDir/$hook
done
echo

# You must exit with a status of '0' if the script was successful or '1' otherwise.
exit 0
