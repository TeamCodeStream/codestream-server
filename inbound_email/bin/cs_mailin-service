#!/bin/bash

#desc#  service init script

function usage {
    echo "usage: $0 { start | stop | status | restart } [-- service-args]" >&2
    exit 1
}

function mail_service_stop_and_wait {
	mail_service_is_running && mail_service_init --stop
	local unprocessedMsgs=`ls $CS_MAILIN_INBOUND_EMAIL_DIRECTORY | wc -l`
	local loopCount=0
	while [ $unprocessedMsgs -gt 0  -o $loopCount -ge 20 ]; do
		echo "WARNING: there are $unprocessedMsgs unprocessed messages in $CS_MAILIN_INBOUND_EMAIL_DIRECTORY"
		sleep 2
		unprocessedMsgs=`ls $CS_MAILIN_INBOUND_EMAIL_DIRECTORY | wc -l`
		loopCount=`expr $loopCount + 1`
	done
	[ $loopCount -ge 20 ] && echo "ERROR: timed out waiting for all messages to be processed. Giving up."
}

service_name=inbound_email_server.js
[ -z "$1" ] && usage
[ -z "$CS_MAILIN_SANDBOX" ] && echo "sandbox not loaded">&2 && exit 1
. $DT_TOP/lib/init_funcs.sh
. $CS_MAILIN_TOP/sandbox/shared/mail-service.sh

ec=0
case "$1" in
	start)
		[ -n "$CS_MAILIN_MAIL_SERVICE_INIT" ] && { mail_service_is_running || mail_service_init --start; }
		if [ -n "$(service_pid_from_pstree $service_name)" ]; then
			echo "$service_name is aleady running"
			service_status $service_name
		else
			echo "`date`: cs_mailin-service is starting the inbound email server"
			nohup $CS_MAILIN_TOP/bin/$service_name $server_args 2>&1 /dev/null &
			sleep 1
			service_status $service_name
			ec=$?
		fi
		;;
	stop)
		[ -n "$CS_MAILIN_MAIL_SERVICE_INIT" ] && mail_service_stop_and_wait
		service_stop $service_name useForce
		ec=$?
		sleep 2
		service_status $service_name
		;;
	status)
		service_status $service_name
		;;
	restart)
		service_stop $service_name useForce
		sleep 2
		service_status $service_name
		[ $? -ne 0 ] && echo "$service_name failed to shutdown" && exit 1
		nohup $CS_MAILIN_TOP/bin/$service_name $server_args >/dev/null 2>&1 </dev/null &
		sleep 1
		service_status $service_name
		ec=$?
		;;
	*)
		usage
		;;
esac
exit $ec
