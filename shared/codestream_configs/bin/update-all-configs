#!/bin/bash

# re-generate codestream config files and config templates for distribution

function usage {
	echo -e "usage: $0 [-fyvd] [-e <env-list>]

use -f to force execution with default settings
default environment list: $environmentList
"
	exit 1
}

[ -z "$KM_SECRETS" ] && echo "Set KM_SECRETS to the location of the PKI database (use -y to bypass prompts)" && exit 1
[ -z "$1" ] && usage

if [ "$DT_RDB_WHICH" == "nrdev" ]; then
	profiles="$DT_RESOURCES/codestream/config-profiles"
	environmentList="local local1 local2 dev pd pd2"
	# environmentList="local local1 local2 pd pd2 qa qa2 ci pi stg"
elif [ "$DT_RDB_WHICH" == "nrprod" ]; then
	profiles="$DT_RESOURCES/codestream/config-profiles"
	environmentList="us1 eu1"
else
	environmentList="local local1 local2 ci pi pd pd2 qa qa2 prod eu0 dev nr stg"
fi
if [ -f "$DT_RESOURCES/codestream/config-profiles/parameters.defaults.$DT_RDB_WHICH.json" ]; then
	schemaDefaults="--schema-defaults $DT_RESOURCES/codestream/config-profiles/parameters.defaults.$DT_RDB_WHICH.json"
	echo "Overriding default values with: $schemaDefaults"
else
	schemaDefaults=""
fi
yes=""
verbose=""
force=0
debug=""
#onpremInstallDir=""
while getopts "dyvfe:" arg
do
	case $arg in
	y) yes=y;;
	d) debug="--debug"; verbose=1;;
	v) verbose=1;;
	f) force=1;;
	e) environmentList="$OPTARG";;
	# o) onpremInstallDir=$OPTARG;;
	*) usage;;
	esac
done
shift `expr $OPTIND - 1`
binDir=`dirname $0`
codestream_server=$(cd $binDir/../../.. && pwd)
codestream_configs=$(cd $binDir/.. && pwd)
[ -z "$profiles" ] && profiles="$codestream_configs/profiles"
schemaVersion=`cat $codestream_configs/parameters.version`
[ -d $KM_SECRETS/categories/config ] && outDir=$KM_SECRETS/categories/config || outDir=$KM_SECRETS/config

# we write templates to the onprem-install repo; this is how we find it
# if [ -z "$onpremInstallDir" ]; then
# 	[ -d "$codestream_configs/../onprem-install" ] && onpremInstallDir=$(cd $codestream_configs/.. && pwd)
# 	[ -z "$onpremInstallDir" -a -d "$HOME/src/onprem-install" ] && onpremInstallDir=$(cd $HOME/src && pwd)
# else
# 	[ -d "$onpremInstallDir" ] && onpremInstallDir=$(cd $onpremInstallDir/.. && pwd) || onpremInstallDir=""
# fi
# [ -z "$onpremInstallDir" ] && echo "cannot find onprem-install repo" && exit 1
# echo -e "I found onprem-install in $onpremInstallDir"

# verbose=1

# This assumes a sandbox install where 'private' is the remote for private branches

source $codestream_configs/lib/update_funcs.sh

# keep our json files sorted
for p in `/bin/ls $profiles/*.json $codestream_configs/parameters.json`
do
	# echo "sorting $p"
	[ -n "$verbose" ] && echo $binDir/process-profile $debug --sort-json $p
	$binDir/process-profile $debug --sort-json $p
done

echo "Current schema version is: $schemaVersion"
# echo -n "Do you want to bump it for these latest writes (y/N)? "; read ans
# if [ "$ans" == y -o "$ans" == yes ]; then
# 	expr $schemaVersion + 1 >$codestream_configs/parameters.version
# 	schemaVersion=`cat $codestream_configs/parameters.version`
# 	echo "Schema version is now: $schemaVersion"
# fi

# create the README.parameter-definitions file for documentation
[ -n "$verbose" ] && echo === $binDir/process-profile $schemaDefaults $debug --show-desc --out $codestream_configs/README.parameter-definitions.json.x
$binDir/process-profile $schemaDefaults $debug --show-desc --out $codestream_configs/README.parameter-definitions.json.x
diff_notify $codestream_configs/README.parameter-definitions.json "$yes"

# create the config templates for on-prem single host preview and quickstart (beta release only)
# for onpremConfig in minimal quickstart
# do
# 	[ -n "$verbose" ] && echo === $binDir/process-profile $schemaDefaults --env $onpremConfig --profile $profiles/onprem-single-host-preview-template.json --out $onpremInstallDir/onprem-install/config-templates/beta/single-host-preview-$onpremConfig-cfg.json.template.x
# 	$binDir/process-profile $schemaDefaults --env $onpremConfig --profile $profiles/onprem-single-host-preview-template.json --out $onpremInstallDir/onprem-install/config-templates/beta/single-host-preview-$onpremConfig-cfg.json.template.x
# 	diff_notify $onpremInstallDir/onprem-install/config-templates/beta/single-host-preview-$onpremConfig-cfg.json.template "$yes"
# done

# create onprem config suitable for local sandbox development
# for onpremEnv in local
# do
# 	[ -n "$verbose" ] && echo === $binDir/process-profile $schemaDefaults --env $onpremEnv --profile $profiles/onprem-single-host-preview-template.json --out $outDir/onprem-quickstart_${onpremEnv}_${schemaVersion}_.json.x
# 	$binDir/process-profile $schemaDefaults --env $onpremEnv --profile $profiles/onprem-single-host-preview-template.json --out $outDir/onprem-quickstart_${onpremEnv}_${schemaVersion}_.json.x
# 	diff_notify $outDir/onprem-quickstart_${onpremEnv}_${schemaVersion}_.json "$yes"
# done

# create default configs deployed with the api repo
# for csEnv in open-development onprem-slh-quickstart
# do
# 	[ -n "$verbose" ] && echo === $binDir/process-profile $schemaDefaults --env $csEnv --profile $profiles/onprem-single-host-preview-template.json --out $codestream_server/api_server/etc/configs/$csEnv.json.x
# 	$binDir/process-profile $schemaDefaults --env $csEnv --profile $profiles/onprem-single-host-preview-template.json --out $codestream_server/api_server/etc/configs/$csEnv.json.x
# 	diff_notify $codestream_server/api_server/etc/configs/$csEnv.json "$yes"
# done

# cloud configuration files, all environments (consumed by developers via dt-dev-update-secrets)
cfgFileName=codestream-cloud
for csEnv in $environmentList
do
	[ -n "$verbose" ] && echo === $binDir/process-profile $schemaDefaults $debug --profile $profiles/cloud.json --env $csEnv --out $outDir/${cfgFileName}_${csEnv}_${schemaVersion}_.json.x
	$binDir/process-profile $schemaDefaults $debug --profile $profiles/cloud.json --env $csEnv --out $outDir/${cfgFileName}_${csEnv}_${schemaVersion}_.json.x || exit 1
	diff_notify $outDir/${cfgFileName}_${csEnv}_${schemaVersion}_.json "$yes"

	# derivatives
	for overridesFile in `ls $outDir/overrides.$cfgFileName.*.$csEnv.json 2>/dev/null`
	do
		baseOverridesFileName=`basename $overridesFile`
		derivativeCfgName="`echo $baseOverridesFileName|cut -f3 -d.`"
		derivativeFile="${derivativeCfgName}_${csEnv}_${schemaVersion}_.json"
		echo "Processing overrides file for $cfgFileName (env:$csEnv, schema:$schemaVersion) -> $derivativeFile"

		# echo dt-merge-json --existing-file $outDir/${cfgFileName}_${csEnv}_${schemaVersion}_.json --new-file $overridesFile --load-secrets-from $KM_SECRETS/categories --keep-header-comments-from-new-file --overwrite-from-new
		dt-merge-json --existing-file $outDir/${cfgFileName}_${csEnv}_${schemaVersion}_.json --new-file $overridesFile --load-secrets-from $KM_SECRETS/categories --keep-header-comments-from-new-file --overwrite-from-new >$outDir/$derivativeFile.x || exit 1
		diff_notify $outDir/$derivativeFile "$yes"
	done
done

# onprem development configurations
# for csEnv in "local" ci pi dev
# do
# 	[ -n "$verbose" ] && echo === $binDir/process-profile $schemaDefaults --profile $profiles/onprem-development.json --env $csEnv --out $outDir/onprem-development_${csEnv}_${schemaVersion}_.json.x
# 	$binDir/process-profile $schemaDefaults --profile $profiles/onprem-development.json --env $csEnv --out $outDir/onprem-development_${csEnv}_${schemaVersion}_.json.x
# 	diff_notify $outDir/onprem-development_${csEnv}_${schemaVersion}_.json "$yes"
# done

# Creates the onprem overlay files for subtle tweeks to onprem configs
# $binDir/update-onprem-bootstraps
