#!/usr/bin/env python3

import os
import sys
import argparse
import re
import devtools.core as dtCore


# utility function - takes a json file with comments on top (optional) and sorts the json data
def sortJsonWithHeaderComments(file, json=None, outFile=None):
	if not json:
		json = dtCore.io.readJsonFileIgnoreComments(file)
	if not outFile:
		outFile = file
	comments = dtCore.exec.execCommand(f"grep '^//' {file} >/tmp/_comments; echo >>/tmp/_comments")
	dtCore.io.dumpData(json, where="/tmp/_json", tabIndent=True)
	# print(f"backing up file to {file}.backup")
	# dtCore.exec.execCommand(f"cp {file} {file}.backup")
	dtCore.exec.execCommand(f"cat /tmp/_comments /tmp/_json >{outFile}")
	os.remove("/tmp/_comments")
	os.remove("/tmp/_json")


def debugMsg(msg):
	if args.debug:
		dtCore.io.printErr(msg)


def getSectionDefaultsFromSchema(schema, cfg, spaces):
	for prop in list(schema.keys()):
		debugMsg(f"{spaces}getSectionDefaultsFromSchema: prop = {prop}")
		if 'desc' in schema[prop]:
			cfg[prop] = dtCore.util.someValueOrNone(schema[prop], 'default')
		else:
			cfg[prop] = {}
			getSectionDefaultsFromSchema(schema[prop], cfg[prop], f"{spaces}  ")


# return the repeating block's key, if found
def blockKey(schema, spaces):
	keyList = list(schema.keys())
	debugMsg(f"{spaces}blockKey schema keys are {keyList}")
	if len(keyList) == 1:
		match = re.search(r'^\<(.+)\>$', keyList[0])
		if match:
			debugMsg(f"{spaces}repeating block found with key {match.group(1)}")
			return(match.group(1))
	return None


# load the secrets file and set defaults from schema
def loadSecretsFile(profile, schema, repeatingBlockKey, spaces):
	secretsFile = profile['_loadSecretsFile']
	debugMsg(f"{spaces}loading secrets from {args.secrets}/{secretsFile}")
	secretsData = dtCore.io.readKVFileToDict(f"{args.secrets}/{secretsFile}")
	block = {}
	# lowest precedence: schema defaults
	if repeatingBlockKey:
		getSectionDefaultsFromSchema(schema[repeatingBlockKey], block, spaces)
	else:
		getSectionDefaultsFromSchema(schema, block, spaces)
	# next prcedence: any values specified in profile
	for k in profile.keys():
		if k == '_loadSecretsFile':
			continue
		block[k] = profile[k]
	# highest precedence: fields in secrets file
	for sProp in list(block.keys()):
		if sProp in secretsData:
			block[sProp] = secretsData[sProp]
	return block


def buildCfgFile(cfg, schema, profile, spaces=''):
	debugMsg(f"{spaces}buildCfgFile profile keys: {list(profile.keys())}")

	if isinstance(profile, dict):
		if 'defaultEnv' in profile:
			env = args.env if args.env in profile else 'defaultEnv'
			if isinstance(profile[env], dict):
				debugMsg(f"{spaces}processing environment block for env = {env}, {profile[env]}")
				buildCfgFile(cfg, schema, profile[env], f"{spaces}  ")
			return

		if '_loadSecretsFile' in profile:
			profile = loadSecretsFile(profile, schema, None, spaces)
			debugMsg(f"{spaces}secrets loaded from file. block keys are {list(profile.keys())}")
			buildCfgFile(cfg, schema, profile, f"{spaces}  ")
			return

		if '_loadBlockPropertiesFrom' in profile:
			return

		if not profile:
			debugMsg(f"{spaces}profile is empty dict - setting to defaults")
			getSectionDefaultsFromSchema(schema, cfg, spaces)
			return

	blockDefaults = {}
	getSectionDefaultsFromSchema(schema, blockDefaults, spaces)
	fillSection = False
	for prop in list(profile.keys()):
		# env = args.env if isinstance(profile[prop], dict) and args.env in profile[prop] else 'defaultEnv'
		repeatingBlockKeyVar = blockKey(schema, spaces)  # appProvider
		repeatingBlockKey = f"<{repeatingBlockKeyVar}>" if repeatingBlockKeyVar else None  # <appProvider>
		debugMsg(f"\n{spaces}=== checking prop = {prop}, repeatingBlockKeyVar = {repeatingBlockKeyVar}")

		if isinstance(profile[prop], dict) and not profile[prop]:
			debugMsg(f"{spaces}1 empty dict in profile - using schema defaults")
			cfg[prop] = {}
			getSectionDefaultsFromSchema(schema[prop], cfg[prop], spaces)
		elif isinstance(profile[prop], dict):
			debugMsg(f"{spaces}3 diving deeper on {prop}, profile[{prop}] = {profile[prop]}")
			cfg[prop] = {}
			if "_loadBlockPropertiesFrom" in profile[prop]:
				# setup for post processing
				cfg[prop] = profile[prop]
			elif repeatingBlockKey:
				buildCfgFile(cfg[prop], schema[repeatingBlockKey], profile[prop], f"{spaces}  ")
			else:
				buildCfgFile(cfg[prop], schema[prop], profile[prop], f"{spaces}  ")
		elif prop in schema:
			debugMsg(f"{spaces}4 setting scalar")
			cfg[prop] = profile[prop]
			fillSection = True
		else:
			dtCore.io.printErr("property {} not defined in schema".format(prop))
			exit(1)

		if args.debug:
			dtCore.io.dumpData(cfg[prop], msg=f"end of loop for prop: cfg[{prop}]:")

	# this will complete a section with default properties where the profile only specifies a fraction of them
	if blockDefaults and fillSection:
		for defaultProp in list(blockDefaults.keys()):
			if defaultProp not in cfg:
				cfg[defaultProp] = blockDefaults[defaultProp]


# return a reference to a dict (object) within cfgFile that
# traverses the keyPath. If the enter path cannot be followed
# return the leaf.
def findNode(keyPath):
	global cfgFile
	node = cfgFile
	i = 0
	while i < len(keyPath):
		if keyPath[i] not in node:
			return node
		node = node[keyPath[i]]
		i += 1
	return node


# Create a cfgFile dict based on variables.json
def buildCfgFileProperties(schema, keyPath, task='show-desc'):
	global cfgFile
	for k in schema.keys():
		node = findNode(keyPath)
		if 'desc' not in schema[k]:
			node[k] = {}
			buildCfgFileProperties(schema[k], keyPath + [k], task)
		else:
			if task == 'show-desc':
				node[k] = schema[k]['desc']
				if dtCore.util.someValueOrNone(schema[k], 'env'):
					node[k] += f" [{schema[k]['env']}]"
			elif task == 'show-env':
				node[k] = schema[k]['env'] if dtCore.util.someValueOrNone(schema[k], 'env') else "undefined"


def overrideDefaults(schema: dict, schemaDefaults: dict) -> None:
	for overrideProp in schemaDefaults.keys():
		if isinstance(schemaDefaults[overrideProp], dict):
			overrideDefaults(schema[overrideProp], schemaDefaults[overrideProp])
		else:
			schema[overrideProp]['default'] = schemaDefaults[overrideProp]


secretsDefault = os.environ['KM_SECRETS'] if 'KM_SECRETS' in os.environ else ""
if os.path.isdir(f"{secretsDefault}/categories"):
	secretsDefault = f"{secretsDefault}/categories"
parser = argparse.ArgumentParser(description="create config data files from templates")
parser.add_argument('--debug', action='store_true', default=False, help="debug mode")
parser.add_argument('--show-desc', action='store_true', default=False, help="display parameter with descriptions")
parser.add_argument('--show-env', action='store_true', default=False, help="display parameter environment vars")
parser.add_argument('--sort-json', type=str, help="sort a json file where their might be comments on top (not embedded)")
parser.add_argument('-p', '--profile', type=str, help="profile")
parser.add_argument('-e', '--env', type=str, default="defaultEnv", help="environment")
parser.add_argument('--secrets', type=str, default=secretsDefault, help="secrets directory")
parser.add_argument('--config-dir', type=str, help="directory containing schema, version and related files (defaults to parent of dir where this script resides)")
parser.add_argument('--schema', type=str, default="parameters.json", help="schema file. defaults to paraemters.json")
parser.add_argument('--schema-defaults', type=str, help="alternate default values from those in parameters.json")
parser.add_argument('--out', type=str, help="output file (defaults to stdout)")
if len(sys.argv) == 1:
	parser.print_help()
	exit(1)

args = parser.parse_args()
# if not args.secrets:
# 	printErr("warning: no secrets directory defined")

configDir = args.config_dir or os.path.dirname(os.path.realpath(__file__)) + "/.."
schemaFile = args.schema if os.path.exists(args.schema) else f"{configDir}/{args.schema}" if os.path.exists(f"{configDir}/{args.schema}") else None
if not schemaFile:
	dtCore.io.printErr(f"could not find schema. Tried {args.schema} and {configDir}/{args.schema}")
	exit(1)
schema = dtCore.io.readJsonFileIgnoreComments(schemaFile)
if args.schema_defaults:
	schemaDefaultsFile = args.schema_defaults if os.path.exists(args.schema_defaults) else f"{configDir}/{args.schema_defaults}" if os.path.exists(f"{configDir}/{args.schema_defaults}") else None
	if not schemaDefaultsFile:
		dtCore.io.printErr(f"could not find schema defaults file. Tried {args.schema_defaults} and {configDir}/{args.schema_defaults}")
		exit(1)
	schemaDefaults = dtCore.io.readJsonFileIgnoreComments(schemaDefaultsFile)
	overrideDefaults(schema, schemaDefaults)

cfgFile = {}
if args.show_desc:
	buildCfgFileProperties(schema, [])
elif args.show_env:
	buildCfgFileProperties(schema, [], 'show-env')
elif args.sort_json:
	sortJsonWithHeaderComments(args.sort_json)
	exit(0)
elif args.profile:
	profile = dtCore.io.readJsonFileIgnoreComments(args.profile)
	buildCfgFile(cfgFile, schema, profile)
	# MAJOR HORRIBLE HACK - post process section headers
	for k in list(cfgFile.keys()):
		if '_loadBlockPropertiesFrom' in cfgFile[k]:
			blockPropDict = cfgFile[k]['_loadBlockPropertiesFrom']
			env = args.env if args.env in blockPropDict else 'defaultEnv'
			if not blockPropDict[env]:
				cfgFile[k] = None
			else:
				propertiesFile = blockPropDict[env]['_file'].format(**os.environ)
				propertiesData = dtCore.io.readJsonFileIgnoreComments(propertiesFile)
				propertiesData = dtCore.util.getByDottedNotation(propertiesData, blockPropDict[env]['_rootProp'])
				cfgFile[k] = propertiesData
		elif isinstance(cfgFile[k], dict) and not len(list(cfgFile[k].keys())):
			cfgFile[k] = None
	if args.out:
		sortJsonWithHeaderComments(args.profile, json=cfgFile, outFile=args.out)
		exit(0)
else:
	parser.print_help()
	exit(1)

if args.out:
	dtCore.io.dumpData(cfgFile, where=args.out, tabIndent=True)
else:
	debugMsg("-----------  RESULTS  -------------")
	dtCore.io.dumpData(cfgFile)
exit(0)
