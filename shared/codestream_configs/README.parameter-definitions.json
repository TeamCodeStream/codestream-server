{
	"adminServer": {
		"adminServerDisabled": "true will disable admin server and related functionality [OPADM_DISABLED]",
		"ignoreHttps": "set to true to respond to http instead of https [OPADM_IGNORE_HTTPS]",
		"logger": {
			"consoleOk": "allow logging to the console [OPADM_LOG_CONSOLE_OK]",
			"debugOk": "more verbose logging (debug level) [OPADM_LOG_DEBUG_OK]",
			"directory": "directory for the onprem admin server logs [OPADM_LOGS]",
			"newRelicLoggingOk": "allow forwarding APM logs to NR [OPADM_LOG_NEW_RELIC_OK]"
		},
		"port": "admin server port [OPADM_PORT]",
		"securePort": "admin server secure port [OPADM_SECURE_PORT]",
		"showConfig": "dump configuration data to console [OPADM_SHOW_CFG]"
	},
	"apiServer": {
		"altBroadcasterHost": "alternate hostname for api -> broadcaster communication [CS_API_ALT_BROADCASTER_HOST]",
		"authOrigin": "origin to use for third-party auth callbacks [CS_API_AUTH_ORIGIN]",
		"callbackEnvironment": "allows for callbacks through VPN to developers' local servers [CS_API_CALLBACK_ENV]",
		"confirmCodeExpiration": "how long a confirmation code remains valid (in millisecs, default = 1 week) [CS_API_CONFIRM_CODE_EXPIRATION]",
		"confirmationExpiration": "how long a token for email confirmation remains valid (in millisecs, default = 1 day) [CS_API_CONFIRMATION_EXPIRATION]",
		"confirmationNotRequired": "set to true to disable email confirmation [CS_API_CONFIRMATION_NOT_REQUIRED]",
		"disablePhoneHome": "set to false to disable phone home reporting (license permitting) [CS_API_PHONE_HOME]",
		"dontWantAWS": "set to true so API server will not use any AWS services [CS_API_DONT_WANT_AWS]",
		"forgotPasswordExpiration": "how long a token for forgot-password remains valid (in millisecs, default = 1 day) [CS_API_FORGOT_PASSWORD_EXPIRATION]",
		"helpIsAvailable": "set to true enable API /help [CS_API_HELP_AVAILABLE]",
		"ignoreHttps": "set to true to respond to http instead of https [CS_API_IGNORE_HTTPS]",
		"logger": {
			"consoleOk": "allow logging to the console [CS_API_LOG_CONSOLE_OK]",
			"debugOk": "more verbose logging (debug level) [CS_API_DEBUG_OK]",
			"directory": "directory for api server logs [CS_API_LOGS]",
			"newRelicLoggingOk": "allow forwarding APM logs to NR [OPADM_LOG_NEW_RELIC_OK]"
		},
		"marketingSiteUrl": "marketing site; used for redirects [CS_API_MARKETING_SITE_URL]",
		"mockMode": "for running tests on same host; nothing is saved to a database and PubNub is replaced by IPC [CS_API_MOCK_MODE]",
		"phoneHomeUrl": "server-side endpoint for phone home data collection [CS_API_PHONE_HOME_URL]",
		"port": "Network port for the api service [CS_API_PORT]",
		"publicApiUrl": "public url to access the API server from beyond [CS_API_PUBLIC_URL]",
		"requireTLS12": "enable TLS 1.2 communications for compliance [CS_API_TLS_12]",
		"securePort": "Secure network port for the api service [CS_API_SECURE_PORT]",
		"sessionAwayTimeout": "how long before we call a user 'away' from keyboard (in millisecs) [CS_API_SESSION_AWAY_TIMEOUT]",
		"showConfig": "print exported api configuration data to console [CS_API_SHOW_CFG]",
		"signupTokenExpiration": "how long a signup token issued by the IDE for a user to signup on web remains valid (in millisecs, default = 10 min) [CS_API_SIGNUP_TOKEN_EXPIRATION]",
		"tmpDirectory": "temp directory [CS_API_TMP]"
	},
	"broadcastEngine": {
		"codestreamBroadcaster": {
			"altApiHost": "alternate hostname to use to make api requests [CS_BROADCASTER_ALT_API_HOST]",
			"host": "hostname of the broadcaster service (from client point-of-view)",
			"ignoreHttps": "set to true to respond to http instead of https [CS_BROADCASTER_IGNORE_HTTPS]",
			"logger": {
				"consoleOk": "allow logging to the console [CS_BROADCASTER_LOG_CONSOLE_OK]",
				"debugOk": "more verbose logging (debug level) [CS_BROADCASTER_DEBUG_OK]",
				"directory": "directory for broadcaster logs [CS_BROADCASTER_LOGS]",
				"newRelicLoggingOk": "allow forwarding APM logs to NR [OPADM_LOG_NEW_RELIC_OK]"
			},
			"port": "Network port for the broadcaster service [CSSVC_BROADCASTER_PORT]",
			"secrets": {
				"api": "used to generate json web tokens for authentication tokens passed to the client [CSSVC_BROADCASTER_API_SECRET]",
				"auth": "used to privilege certain api server requests to the broadcaster service [CSSVC_BROADCASTER_AUTH_SECRET]"
			},
			"securePort": "Secure network port for the broadcaster service [CSSVC_BROADCASTER_SECURE_PORT]",
			"showConfig": "print exported broadcaster configuration data to console [CS_BROADCASTER_SHOW_CFG]"
		},
		"pubnub": {
			"blueKey": {
				"publishKey": "pubnub publishing key [CSSVC_PUBNUB_PUBLISH_BLUE_KEY]",
				"secretKey": "pubnub adminstrative (secret) key [CSSVC_PUBNUB_BLUE_SECRET]",
				"subscribeKey": "pubnub subscription key [CSSVC_PUBNUB_SUBSCRIBE_BLUE_KEY]"
			},
			"greenKey": {
				"publishKey": "pubnub publishing key [CSSVC_PUBNUB_PUBLISH_GREEN_KEY]",
				"secretKey": "pubnub adminstrative (secret) key [CSSVC_PUBNUB_GREEN_SECRET]",
				"subscribeKey": "pubnub subscription key [CSSVC_PUBNUB_SUBSCRIBE_GREEN_KEY]"
			},
			"keepAlive": "use pubnub keep-alives",
			"preferredKeyColor": "preferred keyset to use (blue or green) [CSSVC_PUBNUB_PREFERRED_KEY_COLOR]",
			"ssl": "use SSL for pubnub communications",
			"uuid": "description needed"
		},
		"selected": "chosen broadcast engine (pubnub or codestreamBroadcaster) [CSSVC_BROADCAST_ENGINE]"
	},
	"email": {
		"emailTo": "Divert all email to this address",
		"notificationInterval": "Frequency email is generated (in millisecs, default = 30 secs)",
		"replyToDomain": "email domain for routing replies back to codestream",
		"senderEmail": "all generated emails will be sent as this user",
		"supportEmail": "support email address to include on email and forms",
		"suppressEmails": "Stop all email from being sent [CSSVC_SUPPRESS_EMAILS]"
	},
	"emailDeliveryService": {
		"NodeMailer": {
			"disabled": "disable nodeMailer delivery service",
			"host": "smtp mailer host",
			"password": "smtp authentication password",
			"port": "Email submission port",
			"secure": "use secure transport when sending mail",
			"service": "NodeMailer service type (gmail, ...)",
			"username": "smtp authentication user"
		},
		"sendgrid": {
			"apiKey": "key to access sendgrid API",
			"disabled": "disable sendgrid delivery service",
			"url": "sendgrid api uri"
		}
	},
	"environmentGroup": {
		"<envId>": {
			"name": "user-facing environment name",
			"publicApiUrl": "public url of api",
			"shortName": "user-facing environment short identifier"
		}
	},
	"environmentGroupSecrets": {
		"requestAuth": "secret shared by all environments in one environment group used to authenticate inter-environment requests [CS_API_ENVGRP_SECRETS_REQUESET_AUTH]"
	},
	"inboundEmailServer": {
		"inboundEmailDirectory": "new email files will be delivered to this directory by the mail agent [CS_MAILIN_INBOUND_EMAIL_DIR]",
		"inboundEmailDisabled": "true will disable inbound email processing [CS_MAILIN_INBOUND_EMAIL_DISABLED]",
		"logger": {
			"consoleOk": "allow logging to the console [CS_MAILIN_LOG_CONSOLE_OK]",
			"debugOk": "more verbose logging (debug level) [CS_MAILIN_DEBUG_OK]",
			"directory": "directory for inbound email logs [CS_MAILIN_LOGS]",
			"newRelicLoggingOk": "allow forwarding APM logs to NR [OPADM_LOG_NEW_RELIC_OK]"
		},
		"processDirectory": "email files will be moved to this directory for processing",
		"showConfig": "print exported inbound email configuration data to console [CS_MAILIN_SHOW_CFG]",
		"tempAttachmentDirectory": "attachments in incoming emails will be stored temporarily here",
		"tmpDirectory": "temp directory [CS_MAILIN_TMP]"
	},
	"integrations": {
		"asana": {
			"<appProvider>": {
				"appClientId": "Asana client Id",
				"appClientSecret": "Asana secret",
				"disabled": "disable integration"
			}
		},
		"bitbucket": {
			"<appProvider>": {
				"appClientId": "Bitbucket API client Id",
				"appClientSecret": "Bitbucket API secret",
				"disabled": "disable integration"
			}
		},
		"devops": {
			"<appProvider>": {
				"appClientId": "MS Azure DevOps API client Id [CSSVC_DEVOPS_CLIENT_ID]",
				"appClientSecret": "MS Azure DevOps API secret [CSSVC_DEVOPS_CLIENT_SECRET]",
				"disabled": "disable integration"
			}
		},
		"github": {
			"<appProvider>": {
				"appClientId": "Github API client Id",
				"appClientSecret": "Github API secret",
				"disabled": "disable integration"
			}
		},
		"gitlab": {
			"<appProvider>": {
				"appClientId": "GitLab API client Id",
				"appClientSecret": "GitLab API secret",
				"disabled": "disable integration"
			}
		},
		"glip": {
			"<appProvider>": {
				"appClientId": "Glip API client Id",
				"appClientSecret": "Glip API secret",
				"disabled": "disable integration"
			}
		},
		"jira": {
			"<appProvider>": {
				"appClientId": "Jira API client Id",
				"appClientSecret": "Jira API secret",
				"disabled": "disable integration"
			}
		},
		"linear": {
			"<appProvider>": {
				"appClientId": "Linear API client Id",
				"appClientSecret": "Linear API secret",
				"disabled": "disable integration"
			}
		},
		"msteams": {
			"<appProvider>": {
				"appClientId": "MS Teams API client Id [CSSVC_MSTEAMS_CLIENT_ID]",
				"appClientSecret": "MS Teams API secret [CSSVC_MSTEAMS_CLIENT_SECRET]",
				"botAppId": "Sharing MS Teams Bot App Id [CSSVC_MSTEAMS_BOT_APP_ID]",
				"botAppPassword": "Sharing MS Teams Bot App Password [CSSVC_MSTEAMS_BOT_APP_PASS]",
				"disabled": "disable integration"
			}
		},
		"newRelicIdentity": {
			"<appProvider>": {
				"credentialsServiceHost": "NR Credentials Service Host [CSSVC_NEWRELIC_IDENTITY_CREDENTIALS_SERVICE_HOST]",
				"graphQLHost": "NR GraphQL Host [CSSVC_NEWRELIC_IDENTITY_GRAPHQL_HOST]",
				"idpServiceHost": "NR IdP Service Host [CSSVC_NEWRELIC_IDENTITY_IDP_SERVICE_HOST]",
				"loginServiceHost": "NR Login Service Host [CSSVC_NEWRELIC_IDENTITY_LOGIN_SERVICE_HOST]",
				"newRelicClientId": "NR Client Id [CSSVC_NEWRELIC_IDENTITY_CLIENT_ID]",
				"newRelicClientSecret": "NR Client Secret [CSSVC_NEWRELIC_IDENTITY_CLIENT_SECRET]",
				"newRelicRegion": "NR Region [CSSVC_NEWRELIC_IDENTITY_REGION]",
				"orgServiceHost": "NR Org Service Host [CSSVC_NEWRELIC_IDENTITY_ORG_SERVICE_HOST]",
				"otherRegionGraphQLHost": "NR GraphQL Host [CSSVC_NEWRELIC_IDENTITY_OTHER_REGION_GRAPHQL_HOST]",
				"passwordKey": "NR Password Key (we maintain for short lived encryption) [CSSVC_NEWRELIC_IDENTITY_PASSWORD_KEY]",
				"signupServiceHost": "NR Signup Service Host [CSSVC_NEWRELIC_IDENTITY_SIGNUP_SERVICE_HOST]",
				"userServiceHost": "NR User Service Host [CSSVC_NEWRELIC_IDENTITY_USER_SERVICE_HOST]",
				"userServiceSecret": "NR User Service Secret [CSSVC_NEWRELIC_IDENTITY_USER_SERVICE_SECRET]"
			}
		},
		"newrelic": {
			"<appProvider>": {
				"accountNumber": "NR1 Account Number for webview telemetry [CSSVC_NEWRELIC_WEBVIEW_ACCOUNT_NUMBER]",
				"browserIngestKey": "NR1 ingest browser key [CSSVC_NEWRELIC_BROWSER_KEY]",
				"licenseIngestKey": "NR1 ingest license key [CSSVC_NEWRELIC_LICENSE_KEY]",
				"telemetryEndpoint": "Host endpoint passed to APM tracing library [CSSVC_NEWRELIC_TELEMETRY_ENDPOINT]",
				"webviewAgentId": "NR1 Agent ID for webview telemetry [CSSVC_NEWRELIC_WEBVIEW_AGENT_ID]",
				"webviewAppId": "NR1 App ID for webview telemetry [CSSVC_NEWRELIC_WEBVIEW_APP_ID]"
			}
		},
		"newrelicgrok": {
			"<appProvider>": {
				"apiKey": "API Key for New Relic Grok Requests (through Azure OpenAI) [CSSVC_NEWRELICGROK_API_KEY]",
				"apiUrl": "API Url for New Relic Grok Requests (through Azure OpenAI) [CSSVC_NEWRELICGROK_API_URL]",
				"model": "Model for New Relic Grok Requests (through Azure OpenAI) [CSSVC_NEWRELICGROK_MODEL]",
				"prompt": "Prompt for New Relic Grok Requests (through Azure OpenAI) [CSSVC_NEWRELICGROK_PROMPT]"
			}
		},
		"okta": {
			"<appProvider>": {
				"appClientId": "Okta API client Id",
				"appClientSecret": "Okta API secret",
				"disabled": "disable integration"
			}
		},
		"slack": {
			"<appProvider>": {
				"appClientId": "Slack app client Id (legacy scopes)",
				"appClientSecret": "Slack app secret (legacy scopes)",
				"appId": "Slack app Id (legacy scopes)",
				"appSigningSecret": "Slack app signing secret (legacy scopes)",
				"disabled": "disable integration",
				"interactiveComponentsEnabled": "configures Slack app interactive callback capabilities"
			}
		},
		"trello": {
			"<appProvider>": {
				"apiKey": "Trello API key",
				"disabled": "disable integration"
			}
		},
		"youtrack": {
			"<appProvider>": {
				"appClientId": "YouTrack API client Id",
				"appClientSecret": "YouTrack API secret",
				"disabled": "disable integration"
			}
		}
	},
	"outboundEmailServer": {
		"logger": {
			"consoleOk": "allow logging to the console [CS_OUTBOUND_EMAIL_LOG_CONSOLE_OK]",
			"debugOk": "more verbose logging (debug level) [CS_OUTBOUND_EMAIL_DEBUG_OK]",
			"directory": "directory for outbound email logs [CS_OUTBOUND_EMAIL_LOGS]",
			"newRelicLoggingOk": "allow forwarding APM logs to NR [OPADM_LOG_NEW_RELIC_OK]"
		},
		"showConfig": "print exported outbound email configuration data to console [CS_OUTBOUND_EMAIL_SHOW_CFG]",
		"storage": {
			"mongo": {
				"url": "optional override for mongo connect string [CS_OUTBOUND_EMAIL_MONGO_URL]"
			}
		},
		"tmpDirectory": "temp directory [CS_OUTBOUND_EMAIL_TMP]"
	},
	"payments": {
		"stripe": {
			"annualPlanId": "annual payment plan Id",
			"buyNowCouponCode": "buy-now coupon code",
			"monthlyPlanId": "monthly payment plan Id",
			"publishableKey": "stripe payment key visible to clients",
			"secretKey": "stripe payment secret"
		}
	},
	"queuingEngine": {
		"awsSQS": {
			"outboundEmailQueueName": "SQS queue name [CSSVC_OUTBOUND_EMAIL_QUEUE_NAME]",
			"region": "AWS region where queue resides [AWS_REGION]"
		},
		"rabbitmq": {
			"host": "hostname of rabbitMQ service",
			"outboundEmailQueueName": "RabbitMQ queue name [CSSVC_OUTBOUND_EMAIL_QUEUE_NAME]",
			"password": "rabbitmq password for authentication [CSSVC_RABBITMQ_PASS]",
			"port": "network port for rabbitmq service [CSSVC_RABBITMQ_PORT]",
			"user": "rabbitmq user for authentication [CSSVC_RABBITMQ_USER]"
		}
	},
	"sharedGeneral": {
		"csecApiUrl": "IAST vulnerability mgmt user-facing api [CSSVC_CSEC_API_URL]",
		"installationId": "unique identifier for the onprem installation [CSSVC_INSTALLATION_ID]",
		"isProductionCloud": "identifies customer-facing environments [CSSVC_IS_PRODUCTION_CLOUD]",
		"newRelicApiUrl": "NR1 user-facing api [CSSVC_NEW_RELIC_API_URL]",
		"newRelicLandingServiceUrl": "service to decide if user has an account in NR1 [CSSVC_NEW_RELIC_LANDING_SERVICE_URL]",
		"newRelicSecApiUrl": "NR1 vulnerability mgmt user-facing api [CSSVC_NEW_RELIC_SEC_API_URL]",
		"runTimeEnvironment": "run-time environment (local, onprem, prod, qa, pd, ...) [CSSVC_ENV]"
	},
	"sharedSecrets": {
		"auth": "secret used for authentication [CSSVC_AUTH_SECRET]",
		"commentEngine": "for sharing comments with NR1 [CSSVC_COMMENT_ENGINE_SECRET]",
		"commentEngineAlt": "for sharing comments with NR1 during key rotation [CSSVC_COMMENT_ENGINE_ALT_SECRET]",
		"confirmationCheat": "for bypassing email confirmation, used for unit testing [CSSVC_CONFIRMATION_CHEAT_CODE]",
		"cookie": "secret used for permalinks [CSSVC_COOKIE_SECRET]",
		"mail": "requests to the API server fromm the inbound email server provide this secret. This prevents outside clients from simulating inbound emails [CSSVC_INBOUND_EMAIL_SECRET]",
		"signupFlowJWT": "to enable data exchange with NR1 during signup flow [CSSVC_SIGNUP_FLOW_JWT_SECRET]",
		"subscriptionCheat": "allows unregistered users to subscribe to their me-channel, for testing emails [CSSVC_SUBSCRIPTION_CHEAT_CODE]"
	},
	"ssl": {
		"cafile": "SSL certificate authority bundle (chain) file [CSSVC_SSL_CAFILE]",
		"certfile": "SSL certificate [CSSVC_SSL_CERTFILE]",
		"keyfile": "SSL private key file [CSSVC_SSL_KEYFILE]",
		"requireStrictSSL": "require client-side strict SSL certificate verification"
	},
	"sslCertificates": {
		"<certId>": {
			"caChain": "certificate authority trust chain",
			"cert": "signed certificate",
			"expirationDate": "certificate expiration date",
			"key": "private key",
			"privateCA": "true indicates certificate signed by private CA",
			"requireStrictSSL": "clients seeing this cert should expect it to be valid WRT accepted public certificate authorities",
			"selfSigned": "true indicates certificate is self-signed",
			"targetName": "certificate's target host name"
		}
	},
	"storage": {
		"mongo": {
			"tlsCAFile": "file containing mongo certificate for TLS connections [CSSVC_MONGO_CLIENT_CERT_FILE]",
			"url": "mongo connect string [CSSVC_MONGO_URL]"
		}
	},
	"telemetry": {
		"disabled": "disable telemetry [CSSVC_TELEMETRY_DISABLED]",
		"mixpanel": {
			"token": "Mixpanel API token"
		},
		"segment": {
			"token": "segment token for clients",
			"webToken": "segment web token for the web app"
		}
	},
	"universalSecrets": {
		"telemetry": "for accessing the api prior to authentication (pre-auth secret) [CSSVC_PRE_AUTH_SECRET]"
	},
	"uploadEngine": {
		"s3": {
			"bucket": "S3 bucket name [CSSVC_S3_BUCKET_NAME]",
			"disableSse": "disable server-side-encryption when copying images to S3 [CSSVC_S3_DISABLE_SSE]",
			"keyPrefix": "S3 object key prefix (no trailing /) [CSSVC_S3_KEY_PREFIX]",
			"publicUrl": "public-facing url and prefix for serving images from S3 [CSSVC_S3_PUBLIC_URL]",
			"stripKeyPrefixFromUrl": "determines if file urls saved in mongo include the keyPrefix [CSSVC_S3_STRIP_KEY_PREFIX]"
		},
		"selected": "selected upload engine (s3) [CSSVC_UPLOAD_ENGINE]"
	}
}
